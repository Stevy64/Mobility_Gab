"""
Vues avanc√©es pour les demandes de course avec g√©olocalisation et notifications temps r√©el.

Ce fichier contient le workflow complet de demande de course :
1. Particulier cr√©e demande avec crit√®res GPS
2. Syst√®me trouve chauffeurs √©ligibles par proximit√©
3. Notifications envoy√©es en temps r√©el aux chauffeurs
4. Acceptation d√©clenche tracking automatique
"""

import json
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import get_object_or_404, redirect, render
from django.http import JsonResponse
from django.views import View
from django.views.generic import TemplateView, DetailView
from django.utils import timezone

from accounts.models import User, UserRoles
from core.models import NotificationLog
from core.utils import get_estimated_arrival_time, calculate_distance
from core.notifications import notification_service
from .forms import RideRequestForm
from .models import RideRequest, RideRequestStatus, Trip, Checkpoint
from .utils import find_available_chauffeurs
from datetime import timedelta


class AdvancedRideRequestCreateView(LoginRequiredMixin, View):
    """
    Vue avanc√©e pour cr√©er une demande de course avec crit√®res GPS.
    
    Workflow complet :
    1. Particulier remplit formulaire avec g√©olocalisation
    2. Syst√®me trouve chauffeurs √©ligibles dans rayon d√©fini
    3. Notifications push/SMS envoy√©es aux chauffeurs proches
    4. Premier √† accepter d√©clenche cr√©ation Trip + tracking
    """
    template_name = "subscriptions/ride_request_create_final.html"

    def dispatch(self, request, *args, **kwargs):
        """V√©rifier que seuls les particuliers peuvent acc√©der."""
        if request.user.role != UserRoles.PARENT:
            messages.error(request, "Seuls les particuliers peuvent cr√©er une demande de course.")
            return redirect("core:dashboard")
        return super().dispatch(request, *args, **kwargs)

    def get(self, request):
        """Afficher le formulaire avanc√© avec g√©olocalisation."""
        form = RideRequestForm()
        return render(request, self.template_name, {"form": form})

    def post(self, request):
        """Traiter la demande et notifier les chauffeurs √©ligibles."""
        form = RideRequestForm(request.POST)
        
        if form.is_valid():
            # R√©cup√©rer les donn√©es du formulaire
            pickup_lat = form.cleaned_data.get('pickup_latitude')
            pickup_lon = form.cleaned_data.get('pickup_longitude') 
            max_distance = form.cleaned_data.get('max_distance_km', 10)
            min_rating = form.cleaned_data.get('min_rating', 3.0)
            priority = form.cleaned_data.get('priority', 'closest')
            suggested_chauffeur = form.cleaned_data.get('suggested_chauffeur')
            
            # Trouver les chauffeurs √©ligibles avec g√©olocalisation
            eligible_chauffeurs = self._find_eligible_chauffeurs(
                pickup_lat=pickup_lat,
                pickup_lon=pickup_lon,
                max_distance_km=max_distance,
                min_rating=min_rating,
                priority=priority,
                suggested_chauffeur=suggested_chauffeur,
                need_child_seat=form.cleaned_data.get('need_child_seat', False)
            )
            
            if not eligible_chauffeurs:
                messages.error(request, 
                    f"Aucun chauffeur disponible dans un rayon de {max_distance}km "
                    f"avec une note d'au moins {min_rating}/5.")
                return render(request, self.template_name, {"form": form})
            
            # Cr√©er la demande de course
            ride_request = RideRequest.objects.create(
                parent=request.user,
                chauffeur=None,  # Sera assign√© lors de l'acceptation
                pickup_location=form.cleaned_data["pickup_location"],
                dropoff_location=form.cleaned_data["dropoff_location"],
                pickup_latitude=pickup_lat,
                pickup_longitude=pickup_lon,
                dropoff_latitude=form.cleaned_data.get('dropoff_latitude'),
                dropoff_longitude=form.cleaned_data.get('dropoff_longitude'),
                requested_pickup_time=form.cleaned_data["requested_pickup_time"],
                notes=form.cleaned_data.get("notes", ""),
                status='pending'
            )
            
            # Envoyer les notifications aux chauffeurs √©ligibles
            self._notify_eligible_chauffeurs(ride_request, eligible_chauffeurs)
            
            messages.success(request, 
                f"üöó Demande envoy√©e √† {len(eligible_chauffeurs)} chauffeur(s) √©ligible(s) ! "
                "Vous recevrez une notification d√®s qu'un chauffeur accepte.")
            
            return redirect("subscriptions:ride_request_waiting", pk=ride_request.pk)

        return render(request, self.template_name, {"form": form})
    
    def _find_eligible_chauffeurs(self, pickup_lat=None, pickup_lon=None, 
                                 max_distance_km=10, min_rating=3.0, priority='closest',
                                 suggested_chauffeur=None, need_child_seat=False):
        """
        Trouve les chauffeurs √©ligibles selon les crit√®res sp√©cifi√©s.
        
        Args:
            pickup_lat, pickup_lon: Coordonn√©es GPS du point de d√©part
            max_distance_km: Distance maximale acceptable
            min_rating: Note minimale requise
            priority: Crit√®re de tri (closest, fastest, best_rated, cheapest)
            suggested_chauffeur: Chauffeur pr√©f√©r√© si sp√©cifi√©
            need_child_seat: Si si√®ge enfant requis
            
        Returns:
            List[User]: Liste des chauffeurs √©ligibles tri√©s par priorit√©
        """
        from core.utils import find_available_chauffeurs
        
        # Si chauffeur sugg√©r√© et disponible, le prioriser
        if suggested_chauffeur and suggested_chauffeur.chauffeur_profile.is_available:
            eligible = [suggested_chauffeur]
            
            # Ajouter d'autres chauffeurs comme backup
            if pickup_lat and pickup_lon:
                other_chauffeurs = find_available_chauffeurs(
                    pickup_lat=pickup_lat,
                    pickup_lon=pickup_lon,
                    max_distance_km=max_distance_km,
                    min_reliability_score=min_rating
                )
                
                for chauffeur_profile in other_chauffeurs[:4]:  # Max 4 autres
                    if chauffeur_profile.user != suggested_chauffeur:
                        eligible.append(chauffeur_profile.user)
                        
            return eligible
        
        # Recherche standard avec g√©olocalisation
        if pickup_lat and pickup_lon:
            chauffeur_profiles = find_available_chauffeurs(
                pickup_lat=pickup_lat,
                pickup_lon=pickup_lon,
                max_distance_km=max_distance_km,
                min_reliability_score=min_rating
            )
            
            eligible_chauffeurs = []
            for profile in chauffeur_profiles:
                # Filtrer par si√®ge enfant si n√©cessaire
                if need_child_seat:
                    # En production, ajouter un champ child_seat_available au profil
                    # Pour l'instant, on suppose que tous les chauffeurs peuvent fournir
                    pass
                
                eligible_chauffeurs.append(profile.user)
                
                # Limiter √† 5 chauffeurs maximum pour √©viter le spam
                if len(eligible_chauffeurs) >= 5:
                    break
            
            return eligible_chauffeurs
        
        # Fallback sans g√©olocalisation (moins pr√©cis)
        return list(User.objects.filter(
            role=UserRoles.CHAUFFEUR,
            is_active=True,
            chauffeur_profile__is_available=True,
            chauffeur_profile__reliability_score__gte=min_rating
        ).select_related('chauffeur_profile')[:5])
    
    def _notify_eligible_chauffeurs(self, ride_request, eligible_chauffeurs):
        """
        Envoie les notifications aux chauffeurs √©ligibles.
        
        Utilise le syst√®me de notifications avanc√© pour envoyer
        des notifications push/SMS/email selon les pr√©f√©rences.
        """
        parent_name = ride_request.parent.get_full_name() or ride_request.parent.username
        pickup_time = ride_request.requested_pickup_time.strftime('%H:%M le %d/%m')
        
        for chauffeur in eligible_chauffeurs:
            # Calculer la distance si coordonn√©es disponibles
            distance_info = ""
            eta_info = ""
            
            if (ride_request.pickup_latitude and ride_request.pickup_longitude and
                chauffeur.chauffeur_profile.current_latitude and 
                chauffeur.chauffeur_profile.current_longitude):
                
                distance = calculate_distance(
                    float(chauffeur.chauffeur_profile.current_latitude),
                    float(chauffeur.chauffeur_profile.current_longitude),
                    float(ride_request.pickup_latitude),
                    float(ride_request.pickup_longitude)
                )
                distance_info = f" ({distance:.1f}km de vous)"
                
                # Calculer ETA
                eta = get_estimated_arrival_time(
                    float(chauffeur.chauffeur_profile.current_latitude),
                    float(chauffeur.chauffeur_profile.current_longitude),
                    float(ride_request.pickup_latitude),
                    float(ride_request.pickup_longitude)
                )
                eta_info = f" ‚Ä¢ ETA: {eta} min"
            
            # Titre et message personnalis√©s
            title = "üöó Nouvelle demande de course"
            message = (
                f"{parent_name} demande une course{distance_info}\n"
                f"üìç De: {ride_request.pickup_location}\n"
                f"üèÅ Vers: {ride_request.dropoff_location}\n"
                f"üïí Heure: {pickup_time}{eta_info}"
            )
            
            # Envoyer via tous les canaux disponibles
            notification_service.send_notification(
                user=chauffeur,
                title=title,
                message=message,
                notification_type="trip_request",
                channels=['in_app', 'push', 'sms']  # Notification prioritaire
            )


@login_required
def accept_ride_request_advanced(request, pk):
    """
    Acceptation avanc√©e d'une demande avec d√©clenchement automatique du tracking.
    
    Workflow :
    1. Chauffeur accepte la demande
    2. Cr√©ation automatique du Trip
    3. Lancement du tracking GPS
    4. Notification au particulier
    5. Annulation des autres demandes en attente
    """
    if request.method != 'POST':
        return JsonResponse({'error': 'M√©thode non autoris√©e'}, status=405)
    
    if request.user.role != UserRoles.CHAUFFEUR:
        return JsonResponse({'error': 'Seuls les chauffeurs peuvent accepter'}, status=403)
    
    try:
        ride_request = get_object_or_404(RideRequest, pk=pk, status='pending')
        
        # V√©rifier que le chauffeur √©tait dans la liste des √©ligibles
        # (En production, stocker la liste des chauffeurs notifi√©s)
        
        # Accepter la demande
        ride_request.chauffeur = request.user
        ride_request.status = 'accepted'
        ride_request.accepted_at = timezone.now()
        ride_request.save()
        
        # Cr√©er automatiquement le Trip pour le tracking
        trip = Trip.objects.create(
            parent=ride_request.parent,
            chauffeur=request.user,
            scheduled_date=ride_request.requested_pickup_time.date(),
            status='in_progress'
        )
        
        # Lier le trip √† la demande de course
        ride_request.trip = trip
        ride_request.save()
        
        # Cr√©er le premier checkpoint
        Checkpoint.objects.create(
            trip=trip,
            checkpoint_type='en_route',
            latitude=request.user.chauffeur_profile.current_latitude or 0,
            longitude=request.user.chauffeur_profile.current_longitude or 0,
            notes=f"Course accept√©e par {request.user.get_full_name()}"
        )
        
        # Notifier le particulier avec lien vers la gestion de course
        notification_service.send_notification(
            user=ride_request.parent,
            title="‚úÖ Course accept√©e !",
            message=(
                f"{request.user.get_full_name()} a accept√© votre demande de course.\n"
                f"V√©hicule: {request.user.chauffeur_profile.vehicle_make} "
                f"{request.user.chauffeur_profile.vehicle_model}\n"
                f"Plaque: {request.user.chauffeur_profile.vehicle_plate}\n"
                f"G√©rez votre course: /courses/particulier/{trip.id}/"
            ),
            notification_type="trip_accepted",
            channels=['in_app', 'push', 'email']
        )
        
        # Notifier les autres chauffeurs que la demande n'est plus disponible
        _cancel_pending_notifications(ride_request)
        
        return JsonResponse({
            'success': True,
            'message': 'Course accept√©e ! Le tracking est maintenant actif.',
            'trip_id': trip.id,
            'trip_management_url': f'/courses/chauffeur/{trip.id}/',
            'parent_name': ride_request.parent.get_full_name() or ride_request.parent.username,
            'pickup_location': ride_request.pickup_location,
            'dropoff_location': ride_request.dropoff_location,
            'pickup_time': ride_request.requested_pickup_time.strftime('%H:%M')
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)


@login_required
def decline_ride_request_advanced(request, pk):
    """
    Refus d'une demande de course.
    """
    if request.method != 'POST':
        return JsonResponse({'error': 'M√©thode non autoris√©e'}, status=405)
    
    if request.user.role != UserRoles.CHAUFFEUR:
        return JsonResponse({'error': 'Seuls les chauffeurs peuvent refuser'}, status=403)
    
    try:
        ride_request = get_object_or_404(RideRequest, pk=pk, status='pending')
        
        # Marquer la demande comme refus√©e par ce chauffeur
        # Note: Dans un syst√®me complet, on cr√©erait un mod√®le RideRequestResponse
        # Pour l'instant, on supprime juste la demande de la liste de ce chauffeur
        
        # Notifier le particulier du refus
        from core.notifications import notification_service
        
        notification_service.send_notification(
            user=ride_request.parent,
            title="Demande refus√©e",
            message=f"Un chauffeur a refus√© votre demande. D'autres chauffeurs peuvent encore l'accepter.",
            notification_type="trip_update",
            channels=['in_app']
        )
        
        return JsonResponse({
            'success': True,
            'message': 'Demande refus√©e. Le particulier a √©t√© notifi√©.'
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)


@login_required
def get_parent_ride_requests_status(request):
    """
    API pour que les particuliers puissent suivre leurs demandes en temps r√©el.
    """
    if request.user.role != UserRoles.PARENT:
        return JsonResponse({'error': 'Acc√®s non autoris√©'}, status=403)
    
    try:
        # R√©cup√©rer les demandes r√©centes du particulier
        cutoff_time = timezone.now() - timedelta(hours=4)  # Demandes des 4 derni√®res heures
        recent_cutoff = timezone.now() - timedelta(days=7)

        requests = RideRequest.objects.filter(
            parent=request.user,
            requested_at__gte=recent_cutoff,
            parent_archived=False,
        ).select_related('chauffeur', 'trip').order_by('-requested_at')[:10]
        
        requests_data = []
        for ride_request in requests:
            request_data = {
                'id': ride_request.id,
                'status': ride_request.status,
                'pickup_location': ride_request.pickup_location,
                'dropoff_location': ride_request.dropoff_location,
                'pickup_time': ride_request.requested_pickup_time.strftime('%H:%M'),
                'created_ago': (timezone.now() - ride_request.requested_at).total_seconds() // 60,
                'chauffeur_name': None,
                'trip_id': None,
                'tracking_url': None
            }
            
            if ride_request.chauffeur:
                request_data['chauffeur_name'] = ride_request.chauffeur.get_full_name() or ride_request.chauffeur.username
                
            if ride_request.trip:
                request_data['trip_id'] = ride_request.trip.id
                request_data['tracking_url'] = f'/subscriptions/tracking/{ride_request.trip.id}/'
            
            requests_data.append(request_data)
        
        return JsonResponse({
            'requests': requests_data,
            'timestamp': timezone.now().isoformat()
        })
        
    except Exception as e:
        return JsonResponse({
            'error': str(e),
            'timestamp': timezone.now().isoformat()
        }, status=500)


@login_required
def get_ride_requests_realtime(request):
    """
    API pour r√©cup√©rer les demandes de course en temps r√©el (polling).
    
    Utilis√© par les chauffeurs pour voir les nouvelles demandes
    sans recharger la page.
    """
    if request.user.role != UserRoles.CHAUFFEUR:
        return JsonResponse({'error': 'Acc√®s non autoris√©'}, status=403)
    
    try:
        # R√©cup√©rer les demandes en attente pour ce chauffeur
        # En production, filtrer par g√©olocalisation et crit√®res
        
        # R√©cup√©rer les demandes en attente (incluant celles r√©centes m√™me si l'heure est pass√©e)
        cutoff_time = timezone.now() - timedelta(hours=2)  # Demandes des 2 derni√®res heures
        
        pending_requests = RideRequest.objects.filter(
            status='pending',
            requested_at__gte=cutoff_time  # Chang√© de requested_pickup_time √† requested_at
        ).select_related('parent').order_by('-requested_at')[:10]
        
        requests_data = []
        for ride_request in pending_requests:
            # Calculer distance si possible
            distance = None
            if (ride_request.pickup_latitude and ride_request.pickup_longitude and
                request.user.chauffeur_profile.current_latitude and
                request.user.chauffeur_profile.current_longitude):
                
                distance = calculate_distance(
                    float(request.user.chauffeur_profile.current_latitude),
                    float(request.user.chauffeur_profile.current_longitude),
                    float(ride_request.pickup_latitude),
                    float(ride_request.pickup_longitude)
                )
            
            requests_data.append({
                'id': ride_request.id,
                'parent_name': ride_request.parent.get_full_name() or ride_request.parent.username,
                'pickup_location': ride_request.pickup_location,
                'dropoff_location': ride_request.dropoff_location,
                'pickup_time': ride_request.requested_pickup_time.strftime('%H:%M'),
                'notes': ride_request.notes,
                'distance_km': round(distance, 1) if distance else None,
                'created_ago': (timezone.now() - ride_request.requested_at).total_seconds() // 60,
                'accept_url': f'/subscriptions/ride-requests/{ride_request.id}/accept/',
                'decline_url': f'/subscriptions/ride-requests/{ride_request.id}/decline/'
            })
        
        return JsonResponse({
            'requests': requests_data,
            'timestamp': timezone.now().isoformat(),
            'chauffeur_available': request.user.chauffeur_profile.is_available
        })
        
    except Exception as e:
        return JsonResponse({
            'error': str(e),
            'timestamp': timezone.now().isoformat()
        }, status=500)


class ChauffeurRideRequestsRealtimeView(LoginRequiredMixin, TemplateView):
    """
    Vue pour les chauffeurs pour voir les demandes de course en temps r√©el.
    
    Affiche une interface avec polling automatique des nouvelles demandes,
    avec possibilit√© d'accepter/refuser directement depuis l'interface.
    """
    template_name = "subscriptions/chauffeur_ride_requests_modern.html"
    
    def dispatch(self, request, *args, **kwargs):
        """V√©rifier que seuls les chauffeurs peuvent acc√©der."""
        if request.user.role != UserRoles.CHAUFFEUR:
            messages.error(request, "Seuls les chauffeurs peuvent acc√©der √† cette page.")
            return redirect("core:dashboard")
        return super().dispatch(request, *args, **kwargs)
    
    def get_context_data(self, **kwargs):
        """Ajouter les donn√©es n√©cessaires au template."""
        context = super().get_context_data(**kwargs)
        
        # Statut de disponibilit√© du chauffeur
        context['is_available'] = self.request.user.chauffeur_profile.is_available
        
        # Statistiques rapides
        context['total_requests_today'] = RideRequest.objects.filter(
            requested_at__date=timezone.now().date()
        ).count()
        
        context['accepted_today'] = RideRequest.objects.filter(
            chauffeur=self.request.user,
            status='accepted',
            responded_at__date=timezone.now().date()
        ).count()
        
        return context


class RideRequestWaitingView(LoginRequiredMixin, DetailView):
    """
    Vue d'attente montrant la liste des chauffeurs disponibles.
    
    Affiche les chauffeurs √©ligibles pendant que le particulier attend
    une r√©ponse, avec mise √† jour en temps r√©el du statut.
    """
    model = RideRequest
    template_name = "subscriptions/ride_request_waiting_cohesive.html"
    context_object_name = "ride_request"
    
    def dispatch(self, request, *args, **kwargs):
        """V√©rifier que seuls les particuliers peuvent acc√©der √† leurs propres demandes."""
        ride_request = self.get_object()
        
        if request.user.role != UserRoles.PARENT:
            messages.error(request, "Acc√®s non autoris√©.")
            return redirect("core:dashboard")
            
        if ride_request.parent != request.user:
            messages.error(request, "Cette demande ne vous appartient pas.")
            return redirect("core:dashboard")
            
        # Si la demande est d√©j√† accept√©e, rediriger vers le tracking
        if ride_request.status == 'accepted' and ride_request.trip:
            return redirect("subscriptions:trip_tracking", pk=ride_request.trip.pk)
            
        return super().dispatch(request, *args, **kwargs)
    
    def get_context_data(self, **kwargs):
        """Ajouter la liste des chauffeurs √©ligibles au contexte."""
        context = super().get_context_data(**kwargs)
        ride_request = self.get_object()
        
        # R√©cup√©rer les chauffeurs √©ligibles avec distances
        eligible_chauffeurs = self._get_eligible_chauffeurs_with_details(ride_request)
        context['eligible_chauffeurs'] = eligible_chauffeurs
        
        return context
    
    def _get_eligible_chauffeurs_with_details(self, ride_request):
        """
        R√©cup√®re la liste des chauffeurs √©ligibles avec d√©tails complets.
        """
        from core.utils import find_available_chauffeurs, calculate_distance, get_estimated_arrival_time
        
        eligible_chauffeurs = []
        
        if ride_request.pickup_latitude and ride_request.pickup_longitude:
            # Utiliser la g√©olocalisation pour trouver les chauffeurs
            chauffeur_profiles = find_available_chauffeurs(
                pickup_lat=float(ride_request.pickup_latitude),
                pickup_lon=float(ride_request.pickup_longitude),
                max_distance_km=ride_request.max_distance_km,
                min_reliability_score=float(ride_request.min_rating)
            )
            
            for profile in chauffeur_profiles:
                user = profile.user
                
                # Calculer la distance
                if (profile.current_latitude and profile.current_longitude):
                    distance = calculate_distance(
                        float(profile.current_latitude),
                        float(profile.current_longitude),
                        float(ride_request.pickup_latitude),
                        float(ride_request.pickup_longitude)
                    )
                    user.distance_km = distance
                    
                    # Calculer l'ETA
                    eta = get_estimated_arrival_time(
                        float(profile.current_latitude),
                        float(profile.current_longitude),
                        float(ride_request.pickup_latitude),
                        float(ride_request.pickup_longitude)
                    )
                    user.eta_minutes = int(eta.total_seconds() / 60)
                else:
                    user.distance_km = None
                    user.eta_minutes = None
                
                eligible_chauffeurs.append(user)
        else:
            # Fallback sans g√©olocalisation
            eligible_chauffeurs = list(User.objects.filter(
                role=UserRoles.CHAUFFEUR,
                is_active=True,
                chauffeur_profile__is_available=True,
                chauffeur_profile__reliability_score__gte=ride_request.min_rating
            ).select_related('chauffeur_profile', 'profile')[:5])
        
        # Trier selon la priorit√©
        if ride_request.priority == 'closest' and eligible_chauffeurs:
            eligible_chauffeurs.sort(key=lambda x: x.distance_km if hasattr(x, 'distance_km') and x.distance_km else float('inf'))
        elif ride_request.priority == 'best_rated':
            eligible_chauffeurs.sort(key=lambda x: x.chauffeur_profile.reliability_score, reverse=True)
        elif ride_request.priority == 'fastest' and eligible_chauffeurs:
            eligible_chauffeurs.sort(key=lambda x: x.eta_minutes if hasattr(x, 'eta_minutes') and x.eta_minutes else float('inf'))
        
        return eligible_chauffeurs[:5]  # Limiter √† 5 chauffeurs max


@login_required
def ride_request_status_api(request, pk):
    """
    API pour v√©rifier le statut d'une demande de course en temps r√©el.
    """
    try:
        ride_request = get_object_or_404(RideRequest, pk=pk, parent=request.user)
        
        response_data = {
            'id': ride_request.id,
            'status': ride_request.status,
            'created_at': ride_request.requested_at.isoformat(),
        }
        
        if ride_request.status == 'accepted' and ride_request.chauffeur:
            response_data.update({
                'chauffeur_name': ride_request.chauffeur.get_full_name() or ride_request.chauffeur.username,
                'chauffeur_phone': ride_request.chauffeur.profile.phone if hasattr(ride_request.chauffeur, 'profile') else None,
                'tracking_url': f'/subscriptions/tracking/{ride_request.trip.id}/' if ride_request.trip else None,
            })
        
        return JsonResponse(response_data)
        
    except Exception as e:
        return JsonResponse({
            'error': str(e)
        }, status=500)


@login_required
def cancel_ride_request_api(request, pk):
    """
    API pour annuler une demande de course.
    """
    if request.method != 'POST':
        return JsonResponse({'error': 'M√©thode non autoris√©e'}, status=405)
    
    try:
        ride_request = get_object_or_404(RideRequest, pk=pk, parent=request.user)
        
        if ride_request.status != 'pending':
            return JsonResponse({
                'success': False,
                'error': 'Cette demande ne peut plus √™tre annul√©e'
            })
        
        ride_request.status = 'cancelled'
        ride_request.responded_at = timezone.now()
        ride_request.save()
        
        # Notifier les chauffeurs que la demande est annul√©e
        from core.notifications import notification_service
        
        # En production, notifier tous les chauffeurs qui avaient re√ßu la demande
        eligible_chauffeurs = User.objects.filter(
            role=UserRoles.CHAUFFEUR,
            is_active=True,
            chauffeur_profile__is_available=True
        )[:5]  # Limiter pour √©viter le spam
        
        for chauffeur in eligible_chauffeurs:
            notification_service.send_notification(
                user=chauffeur,
                title="Demande de course annul√©e",
                message=f"La demande de course vers {ride_request.dropoff_location} a √©t√© annul√©e.",
                notification_type="trip_update",
                channels=['in_app']
            )
        
        return JsonResponse({
            'success': True,
            'message': 'Demande annul√©e avec succ√®s'
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)


@login_required
def delete_ride_request_api(request, pk):
    if request.method != 'POST':
        return JsonResponse({'success': False, 'error': 'M√©thode non autoris√©e'})

    ride_request = get_object_or_404(RideRequest, pk=pk)

    if request.user == ride_request.parent or request.user == ride_request.chauffeur:
        ride_request.archive_for_user(request.user)
        return JsonResponse({'success': True})

    return JsonResponse({'success': False, 'error': 'Acc√®s refus√©'}, status=403)


def _cancel_pending_notifications(accepted_request):
    """
    Annule les notifications en attente pour les autres chauffeurs
    quand une demande est accept√©e.
    """
    # En production, impl√©menter un syst√®me de notification en temps r√©el
    # pour informer les autres chauffeurs que la demande n'est plus disponible
    
    # Pour l'instant, on peut juste cr√©er une notification g√©n√©rale
    other_chauffeurs = User.objects.filter(
        role=UserRoles.CHAUFFEUR,
        is_active=True,
        chauffeur_profile__is_available=True
    ).exclude(id=accepted_request.chauffeur.id)
    
    for chauffeur in other_chauffeurs[:5]:  # Limiter pour √©viter le spam
        notification_service.send_notification(
            user=chauffeur,
            title="Demande de course prise",
            message=f"La course vers {accepted_request.dropoff_location} a √©t√© accept√©e par un autre chauffeur.",
            notification_type="trip_update",
            channels=['in_app']  # Notification discr√®te
        )


@login_required
def get_chauffeur_notifications(request):
    """
    API pour r√©cup√©rer les notifications du chauffeur.
    """
    if request.user.role != UserRoles.CHAUFFEUR:
        return JsonResponse({'error': 'Acc√®s non autoris√©'}, status=403)
    
    try:
        from datetime import timedelta
        from core.models import NotificationLog
        
        # R√©cup√©rer les notifications r√©centes
        cutoff_time = timezone.now() - timedelta(hours=24)  # Derni√®res 24h
        
        notifications = NotificationLog.objects.filter(
            user=request.user,
            created_at__gte=cutoff_time
        ).order_by('-created_at')[:20]
        
        notifications_data = []
        for notif in notifications:
            notifications_data.append({
                'id': notif.id,
                'title': notif.title,
                'message': notif.message,
                'type': notif.notification_type,
                'created_at': notif.created_at.strftime('%H:%M'),
                'created_ago': (timezone.now() - notif.created_at).total_seconds() // 60,
                'is_read': notif.read
            })
        
        # Compter les non lues
        unread_count = len([n for n in notifications_data if not n['is_read']])
        
        return JsonResponse({
            'notifications': notifications_data,
            'unread_count': unread_count,
            'timestamp': timezone.now().isoformat()
        })
        
    except Exception as e:
        return JsonResponse({
            'error': str(e),
            'timestamp': timezone.now().isoformat()
        }, status=500)


@login_required
def toggle_chauffeur_availability(request):
    """
    API pour basculer la disponibilit√© du chauffeur.
    """
    if request.method != 'POST':
        return JsonResponse({'error': 'M√©thode non autoris√©e'}, status=405)
    
    if request.user.role != UserRoles.CHAUFFEUR:
        return JsonResponse({'error': 'Acc√®s non autoris√©'}, status=403)
    
    try:
        import json
        data = json.loads(request.body)
        is_available = data.get('is_available', False)
        
        chauffeur_profile = request.user.chauffeur_profile
        chauffeur_profile.is_available = is_available
        chauffeur_profile.save()
        
        # Envoyer une notification au chauffeur
        from core.notifications import notification_service
        status_text = "disponible" if is_available else "indisponible"
        
        notification_service.send_notification(
            user=request.user,
            title=f"Statut mis √† jour",
            message=f"Vous √™tes maintenant {status_text} pour recevoir des demandes de course.",
            notification_type="status_update",
            channels=['in_app']
        )
        
        return JsonResponse({
            'success': True,
            'is_available': is_available,
            'message': f'Statut mis √† jour: {status_text}'
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)
